````
Various symbols.
````
( ) { } [ ] : ,
----
LEFT_PAREN
RIGHT_PAREN
LEFT_BRACE
RIGHT_BRACE
LEFT_BRACKET
RIGHT_BRACKET
COLON
COMMA
END
====

````
Symbols related to boolean expressions.
````
= ! + - > <
== != += -= >= <=
----
EQUAL
BANG
PLUS
MINUS
GREATER
LESS
NEWLINE
EQUAL_EQUAL
BANG_EQUAL
PLUS_EQUAL
MINUS_EQUAL
GREATER_EQUAL
LESS_EQUAL
END
====

````
Control flow keywords.
````
fn return
if elif else
for
----
FN
RETURN
NEWLINE
IF
ELIF
ELSE
NEWLINE
FOR
END
====

````
Type keywords.
````
int float
----
INT
FLOAT
END
====

````
User-defined identifiers, including ones similar to keywords.
````
x y z
x123 y_a z_78_b
fora elifa returnal elsee
----
IDENTIFIER x
IDENTIFIER y
IDENTIFIER z
NEWLINE
IDENTIFIER x123
IDENTIFIER y_a
IDENTIFIER z_78_b
NEWLINE
IDENTIFIER fora
IDENTIFIER elifa
IDENTIFIER returnal
IDENTIFIER elsee
END
====

````
Numbers.
````
123
456.7809
000
----
NUMBER_LITERAL 123
NEWLINE
NUMBER_LITERAL 456.7809
NEWLINE
NUMBER_LITERAL 000
END
====

````
Unexpected character after number decimal.
````
123.anya
----
Unexpected character 'a' after number decimal at line 1 column 5
====

````
Strings.
````
"anya likes to play"
"boren is cool"
("carot loves
eating carrots")
"dyno chugs juice"
----
STRING_LITERAL "anya likes to play"
NEWLINE
STRING_LITERAL "boren is cool"
NEWLINE
LEFT_PAREN
STRING_LITERAL "carot loves
eating carrots"
RIGHT_PAREN
NEWLINE
STRING_LITERAL "dyno chugs juice"
END
====

````
Unterminated string.
````
anya "boren loves to play
with cool kids
----
Unterminated string that started at line 1 column 6.
====

````
Newlines are skipped within parenthesis.
````
(anya, boren,
 carot, dyno, esha,
 fyre)
goro
----
LEFT_PAREN
IDENTIFIER anya
COMMA
IDENTIFIER boren
COMMA
IDENTIFIER carot
COMMA
IDENTIFIER dyno
COMMA
IDENTIFIER esha
COMMA
IDENTIFIER fyre
RIGHT_PAREN
NEWLINE
IDENTIFIER goro
END
====

````
Unexpected character.
````
anya ~ boren
----
Ran into an unexpected character '~' at line 1 column 6
====