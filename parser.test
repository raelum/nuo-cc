````
Function with return statement.
````
fn nothing() {
  return
}
----
FunctionDeclaration: nothing
  params:
  returnType: VOID
  body:
    Return:
      VOID
====

````
Function with return type.
````
fn num(): int {
  return 5
}
----
FunctionDeclaration: num
  params:
  returnType: INT
  body:
    Return:
      5
====

````
Function with parameters.
````
fn ignore(x: int, y: float) {
  return
}
----
FunctionDeclaration: ignore
  params:
    x: INT
    y: FLOAT
  returnType: VOID
  body:
    Return:
      VOID
====

````
Function with parameters and return type.
````
fn some(x: int, y: int): float {
  return 55.3
}
----
FunctionDeclaration: some
  params:
    x: INT
    y: INT
  returnType: FLOAT
  body:
    Return:
      55.3
====

````
Function call.
````
fn greet() {
  print("Hello world!")
}
----
FunctionDeclaration: greet
  params:
  returnType: VOID
  body:
    FunctionCall: print
      "Hello world!"
====